{"version":3,"sources":["Actions/index.js","Actions/secrets.js","components/memItem.js","components/myMemes.js","components/App.js","Reducers/index.js","index.js"],"names":["createMem","new_mem_object","dispatch","params","bodyParams","Object","keys","map","key","encodeURIComponent","join","console","log","fetch","method","headers","body","then","response","json","catch","err","postMemJson","new_mem","type","mem","connect","bindActionCreators","props","useState","hover","setHover","className","onMouseEnter","onMouseLeave","onClick","text0","text1","template_id","id","src","url","alt","name","state","myMemes","newMem","index","success","data","initialState","memLimit","form","setForm","Form","FormGroup","FormLabel","FormControl","onChange","event","target","value","mems","slice","memes","rootReducers","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","receiveMems","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbc47530.chunk.js","sourcesContent":["import { username,password } from './secrets';\r\n\r\n\r\nexport const RECIEVE_MEMS = 'RECIEVE_MEMS';\r\nexport const NEW_MEM = 'NEW_MEM'\r\n\r\n\r\nfunction receiveMems(json){\r\n    const { memes } = json.data;\r\n\r\n    return {\r\n        type:RECIEVE_MEMS,\r\n        memes\r\n    }\r\n}\r\n\r\n\r\nfunction fetchMemJson(){\r\n    return fetch('https://api.imgflip.com/get_memes')\r\n        .then(response=>response.json())\r\n}\r\n\r\nexport function fetchMems(dispatch){\r\n    return function(dispatch){\r\n        return fetchMemJson().then(json=>dispatch(receiveMems(json)))\r\n    }\r\n}\r\n\r\n\r\nfunction newMem(mem){\r\n    return {\r\n        type:NEW_MEM,\r\n        mem\r\n    }\r\n}\r\n\r\nfunction postMemJson(params){\r\n    params['username'] = username;\r\n    params['password'] = password;\r\n\r\n    const bodyParams = Object.keys(params).map(key=>{\r\n        return encodeURIComponent(key) + '=' + encodeURIComponent(params[key])\r\n    }).join('&');\r\n    console.log(\"bodyParams\", bodyParams);\r\n\r\n    return fetch('https://api.imgflip.com/caption_image',{\r\n        method:'POST',\r\n        headers:{\r\n            'Content-Type':'application/X-www-form-urlencoded'\r\n        },\r\n        body:bodyParams\r\n    }).then(response=>{\r\n        return response.json()\r\n    }).catch((err)=>{\r\n        console.log(\"err\", err)\r\n    });\r\n}\r\n\r\nexport function createMem(new_mem_object){\r\n    return function(dispatch){\r\n     return  postMemJson(new_mem_object)\r\n        .then(new_mem=> dispatch(newMem(new_mem)));\r\n    }\r\n}","const username = 'saitejabasa';\r\nconst password = 'Jyothi@143';\r\n\r\nexport { username, password }","import React, { useState } from 'react';\r\nimport { createMem } from '../Actions/index'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\n\r\nconst MemItem = (props)=>{\r\n    const [hover, setHover] = useState(false);\r\n    \r\n    const postMem = ()=>{\r\n        const {text0, text1, createMem} = props;\r\n       \r\n        const memObj={\r\n            template_id:props.mem.id,\r\n            text0,\r\n            text1\r\n        }\r\n        // console.log(\"memObj\", memObj);\r\n        createMem(memObj);\r\n\r\n    }\r\n    \r\n    return (\r\n        <div className=\"mem-iteam\"\r\n            onMouseEnter={()=>setHover(true)}\r\n            onMouseLeave={()=>setHover(false)}\r\n            onClick={postMem}\r\n        >\r\n            <img\r\n                src={props.mem.url}\r\n                alt={props.mem.name}\r\n                className={hover ? \"mem-img dark-img\" : \"mem-img\"}\r\n            />\r\n            <p className= {hover ? \"mem-text\" : 'no-text'}>{props.mem.name}</p> \r\n        </div>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n    \r\n// })\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return bindActionCreators({createMem}, dispatch);\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(MemItem);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst MyMemes = (props)=>{\r\n    // console.log(\"props\", props);\r\n    return(\r\n        <div>\r\n            {\r\n                props.myMemes.map((mem, index)=>{\r\n                    return (\r\n                        mem.success && \r\n                        <img\r\n                            key={index}\r\n                            src={mem.data.url}\r\n                            alt=\"my mem\"\r\n                            className=\"my-mem-img\"\r\n                        /> \r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mappStateToProps = (state)=>{\r\n    return {\r\n        myMemes:state.newMem\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mappStateToProps,null)(MyMemes);\r\n","import React,{ useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MemItems from './memItem';\r\nimport { Form, FormControl, FormLabel, FormGroup }  from 'react-bootstrap';\r\nimport MyMemes from './myMemes';\r\n\r\nconst initialState = {\r\n    memLimit:10,\r\n    text0:'',\r\n    text1:''\r\n}\r\nconst App =(props)=>{\r\n    const [form, setForm] = useState(initialState);\r\n    return (\r\n        <div>\r\n            <h1 className=\"textclr\"><u>Welcome to Meme Creator</u></h1>\r\n            { '  ' }\r\n            <h3 className=\"textclr\"><i>Write some text</i></h3>\r\n            <MyMemes />\r\n             <div >\r\n                <Form className=\"form\">\r\n                    <FormGroup>\r\n                        <FormLabel>Top</FormLabel>\r\n                        {' '}\r\n                        <FormControl\r\n                            className=\"inputstyle\"\r\n                            type=\"text\"\r\n                            onChange={event => setForm({\r\n                                ...form,\r\n                                text0: event.target.value\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                    {\"  \"}\r\n                    <FormGroup>\r\n                        <FormLabel className=\"leftmargin\">Bottom</FormLabel>\r\n                        {\"  \"}\r\n                        <FormControl\r\n                            className=\"inputstyle \"\r\n                            type=\"text\"\r\n                            onChange={event => setForm({\r\n                                ...form,\r\n                                text1: event.target.value\r\n                            })}\r\n                        />\r\n                    </FormGroup>\r\n                </Form>\r\n             </div>\r\n            \r\n            {\r\n                props.mems.slice(0, form.memLimit).map((memes, index)=>{\r\n                    return (\r\n                        <MemItems \r\n                            key={index} \r\n                            mem={memes}\r\n                            text0={form.text0}\r\n                            text1={form.text1}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            <div className=\"mem-btn\" onClick={()=>{\r\n                setForm({\r\n                    ...form,\r\n                    memLimit:form.memLimit+10\r\n                })\r\n            }}>Load 10 more mems.....</div>\r\n\r\n            <div className=\"footer\">\r\n                <footer className=\"footer_style\">\r\n                    <ul className=\"footer_Item\">\r\n                        <li className=\"footer_list\">Developed by Basa Saiteja</li>\r\n                        {/* <li className=\"footer_list\">Developed by Basa Saiteja</li> */}\r\n                        <li className=\"footer_list\">\r\n                            Persional Details:<br/>\r\n                                Name: Basa Saiteja<br/>\r\n                                Profession: Cloud Engineer\r\n                        </li>\r\n                    </ul>\r\n                    \r\n                </footer>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return state\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(App);","import { combineReducers } from 'redux'\r\nimport { RECIEVE_MEMS, NEW_MEM } from '../Actions/index';\r\n\r\n\r\nfunction mems(state=[], action){\r\n    switch(action.type){\r\n        case RECIEVE_MEMS:\r\n            return action.memes;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction newMem(state=[], action){\r\n    switch(action.type){\r\n        case NEW_MEM:\r\n            state = [...state, action.mem]\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducers = combineReducers({ mems, newMem })\r\n\r\nexport default rootReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport 'antd/dist/antd.css';\r\nimport './styles/index.css';\r\n\r\nimport { createStore,applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducers from './Reducers/index';\r\nimport { fetchMems } from './Actions/index';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(\r\n    rootReducers, \r\n    composeWithDevTools(\r\n        applyMiddleware(thunk)\r\n));\r\n\r\n// store.subscribe(()=>console.log(\"store\", store.getState()));\r\nstore.dispatch(fetchMems());\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>\r\n    , document.getElementById('root')\r\n);"],"sourceRoot":""}